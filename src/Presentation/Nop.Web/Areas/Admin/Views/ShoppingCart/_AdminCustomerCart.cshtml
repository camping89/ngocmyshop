@model Nop.Web.Models.ShoppingCart.ShoppingCartModel
@using System.Net
@using Nop.Core
@using Nop.Core.Domain.Tax
@inject IWebHelper webHelper
@inject IWorkContext workContext
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor httpContextAccessor
@{
    var customerId = ViewBag.CustomerId;
}


<div class="order-summary-content shopping-cart-page">
    @await Component.InvokeAsync("Widget", new { widgetZone = "order_summary_content_before" })
    @await Html.PartialAsync("_OrderReviewData", Model.OrderReviewData)
    @if (Model.Items.Count > 0)
    {
        var currencies = Model.CurrencySelectorModel.AvailableCurrencies.Select(x => new SelectListItem
        {
            Text = x.Name,
            Value = x.ExchangeRate.ToString(),
            Selected = x.Id.Equals(Model.PrimaryCurrencyCurrent.Id)
        });
        if (Model.Warnings.Count > 0)
        {
            <div class="message-error">
                <ul>
                    @foreach (var warning in Model.Warnings)
                    {
                        <li>@warning</li>
                    }
                </ul>
            </div>
        }
        @*we add enctype = "multipart/form-data" because "File upload" attribute control type requires it*@
        <form asp-area="Admin" asp-controller="ShoppingCart" asp-action="AdminCart" asp-route-activetab="tab-cart-info" asp-route-customerId="@Context.Request.Query["customerId"]" method="post" enctype="multipart/form-data" id="shopping-cart-form">
            <div class="table-wrapper">
                <table class="cart">
                    <colgroup>
                        @if (Model.IsEditable)
                        {
                            <col width="1" />
                        }
                        @if (Model.ShowSku)
                        {
                            <col width="1" />
                        }
                        @if (Model.ShowProductImages)
                        {
                            <col width="1" />
                        }
                        <col />
                        <col width="1" />
                        <col width="1" />
                        <col width="1" />
                    </colgroup>
                    <thead>
                        <tr>
                            @if (Model.IsEditable)
                            {
                                <th class="remove-from-cart">
                                    @T("ShoppingCart.Remove")
                                </th>
                            }
                            @if (Model.ShowSku)
                            {
                                <th class="sku">
                                    @T("ShoppingCart.SKU")
                                </th>
                            }
                            @if (Model.ShowProductImages)
                            {
                                <th class="product-picture">
                                    @T("ShoppingCart.Image")
                                </th>
                            }
                            <th class="product">
                                @T("ShoppingCart.Product(s)")
                            </th>
                            <th class="unit-price">
                                @T("ShoppingCart.UnitPriceBase")
                            </th>
                            <th class="unit-price">
                                @T("ShoppingCart.ExchangeRate")
                            </th>
                            <th class="unit-price">
                                @T("ShoppingCart.OrderingFee")
                            </th>

                            <th class="unit-price">
                                @T("ShoppingCart.SaleOffPercent")
                            </th>
                            <th class="unit-price">
                                @T("ShoppingCart.UnitPrice")
                            </th>
                            <th class="quantity">
                                @T("ShoppingCart.Quantity")
                            </th>
                            <th class="subtotal">
                                @T("ShoppingCart.ItemTotal")
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.Items)
                        {
                            <tr>
                                @if (Model.IsEditable)
                                {
                                    <td class="remove-from-cart">
                                        @if (item.DisableRemoval)
                                        {
                                            <text>&nbsp;</text>
                                        }
                                        else
                                        {
                                            <label class="td-title">@T("ShoppingCart.Remove"):</label>
                                            <input type="checkbox" name="removefromcart" value="@(item.Id)" />
                                        }
                                    </td>
                                }
                                @if (Model.ShowSku)
                                {
                                    <td class="sku">
                                        <label class="td-title">@T("ShoppingCart.SKU"):</label>
                                        <span class="sku-number">@item.Sku</span>
                                    </td>
                                }
                                @if (Model.ShowProductImages)
                                {
                                    <td class="product-picture">
                                        <a href="@Url.RouteUrl("Product", new {SeName = item.ProductSeName})"><img alt="@item.Picture.AlternateText" src="@item.Picture.ImageUrl" title="@item.Picture.Title" /></a>
                                    </td>
                                }
                                <td class="product">
                                    <a href="@Url.RouteUrl("Product", new {SeName = item.ProductSeName})" class="product-name">@item.ProductName</a>
                                    @if (!string.IsNullOrEmpty(item.AttributeInfo))
                                    {
                                        <div class="attributes">
                                            @Html.Raw(item.AttributeInfo)
                                        </div>
                                    }
                                    @if (!string.IsNullOrEmpty(item.RecurringInfo))
                                    {
                                        <div class="recurring-info">
                                            @Html.Raw(item.RecurringInfo)
                                        </div>
                                    }
                                    @if (!string.IsNullOrEmpty(item.RentalInfo))
                                    {
                                        <div class="rental-info">
                                            @Html.Raw(item.RentalInfo)
                                        </div>
                                    }
                                    @if (Model.IsEditable && item.AllowItemEditing)
                                    {
                                        var editCartItemUrl = Url.RouteUrl("Product", new { SeName = item.ProductSeName });
                                        editCartItemUrl = webHelper.ModifyQueryString(editCartItemUrl, "updatecartitemid=" + item.Id, null);
                                        <div class="edit-item">
                                            <a href="#" onclick="ShowPopUpDetailProductUpdate(@item.ProductId,@item.Id);">@T("Common.Edit")</a>
                                        </div>
                                    }
                                    @if (item.Warnings.Count > 0)
                                    {
                                        <div class="message-error">
                                            <ul>
                                                @foreach (var warning in item.Warnings)
                                                {
                                                    <li>@warning</li>
                                                }
                                            </ul>
                                        </div>
                                    }
                                </td>
                                <td class="unit-price">
                                    <label class="td-title"> @T("ShoppingCart.UnitPriceBase"):</label>
                                    <input name="itempricebase@(item.Id)" type="text" value="@(item.UnitPriceUsd)" class="unit-price-base-input" />
                                    @*<span class="product-unit-price">@item.UnitPrice</span>*@
                                </td>
                                <td class="unit-price">
                                    <label class="td-title">@T("ShoppingCart.ExchangeRate"):</label>
                                   
                                    <select id="customerCurrency" name="customerCurrency" asp-items="@currencies" onchange="changeCurrency(this.value);"></select>
                                    <input name="itemexchangerate@(item.Id)" type="text" value="@if (Model.PrimaryCurrencyCurrent?.Rate != null)
                                                                                                {
                                                                                                    @((float) (Model.CurrencyCurrent.Rate / Model.PrimaryCurrencyCurrent?.Rate))
                                                                                                }" class="exchangerate-input" />
                                    @*<span class="product-unit-price">@item.UnitPrice</span>*@
                                </td>
                                <td class="unit-price">
                                    <label class="td-title">@T("ShoppingCart.OrderingFee"):</label>
                                    <input name="itemfeeship@(item.Id)" type="text" value="@(item.OrderingFee)" class="feeship-input" />
                                </td>
                                <td class="unit-price">
                                    <label class="td-title">@T("ShoppingCart.SaleOffPercent"):</label>
                                    <input name="itemsaleoff@(item.Id)" type="text" value="@(item.SaleOffPercent)" class="saleoff-input" />
                                </td>
                                <td class="unit-price">
                                    <label class="td-title">@T("ShoppingCart.UnitPrice"):</label>
                                    <input id="itemprice" name="itemprice@(item.Id)" type="text" value="@(item.UnitPriceDecimal)" class="price-input" />
                                    @*<span class="product-unit-price">@item.UnitPrice</span>*@
                                </td>
                                <td class="quantity">
                                    <label class="td-title">@T("ShoppingCart.Quantity"):</label>
                                    @if (Model.IsEditable)
                                    {
                                        if (item.AllowedQuantities.Count > 0)
                                        {
                                            <select name="itemquantity@(item.Id)" class="qty-dropdown">
                                                @foreach (var qty in item.AllowedQuantities)
                                                {
                                                    <option selected="@qty.Selected" value="@qty.Value">@qty.Value</option>
                                                }
                                            </select>
                                        }
                                        else
                                        {
                                            <input name="itemquantity@(item.Id)" type="text" value="@(item.Quantity)" class="qty-input" />
                                        }

                                    }
                                    else
                                    {
                                        <span class="product-quantity">@item.Quantity</span>
                                    }
                                </td>
                                <td class="subtotal">
                                    <label class="td-title">@T("ShoppingCart.ItemTotal"):</label>
                                    <span class="product-subtotal">@item.SubTotal</span>
                                    @if (!string.IsNullOrEmpty(item.Discount))
                                    {
                                        <div class="discount">
                                            @T("ShoppingCart.ItemYouSave", item.Discount)
                                        </div>
                                        if (item.MaximumDiscountedQty.HasValue)
                                        {
                                            <div class="discount-additional-info">
                                                @T("ShoppingCart.MaximumDiscountedQty", item.MaximumDiscountedQty.Value)
                                            </div>
                                        }
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            @if (Model.IsEditable && Model.Items.Count > 0 && Model.DisplayTaxShippingInfo)
            {
                var inclTax = workContext.TaxDisplayType == TaxDisplayType.IncludingTax;
                //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                //of course, you can modify appropriate locales to include VAT info there
                <div class="tax-shipping-info">
                    @T(inclTax ? "ShoppingCart.TaxShipping.InclTax" : "ShoppingCart.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))
                </div>
            }
            <div class="cart-options">
                @if (Model.IsEditable)
                {
                    <div class="common-buttons">
                        <input type="submit" name="updatecart" value="@T("ShoppingCart.UpdateCart")" class="button-2 update-cart-button" />
                    </div>
                }
                @if (Model.IsEditable)
                {
                    @await Html.PartialAsync("_CheckoutAttributes", Model)
                }
                @await Component.InvokeAsync("SelectedCheckoutAttributes")
            </div>
            <div class="cart-footer">
                @await Component.InvokeAsync("Widget", new { widgetZone = "order_summary_cart_footer" })
                @if (Model.IsEditable)
                {
                    <div class="cart-collaterals" style="display: none">
                        <div class="deals">
                            @await Html.PartialAsync("_DiscountBox", Model.DiscountBox)
                            @await Html.PartialAsync("_GiftCardBox", Model.GiftCardBox)
                            @await Component.InvokeAsync("Widget", new { widgetZone = "order_summary_content_deals" })
                        </div>
                        @await Component.InvokeAsync("EstimateShipping", new { customerId = customerId })
                    </div>
                }
                <div class="totals">
                    @await Component.InvokeAsync("OrderTotals", new { isEditable = Model.IsEditable, customerId = customerId })
                    @if (Model.IsEditable)
                    {
                        if (!string.IsNullOrEmpty(Model.MinOrderSubtotalWarning))
                        {
                            <div class="min-amount-warning">
                                @Model.MinOrderSubtotalWarning
                            </div>
                        }
                    }
                    @if (Model.IsEditable)
                    {
                        if (Model.TermsOfServiceOnShoppingCartPage)
                        {
                            <div id="terms-of-service-warning-box" title="@T("Checkout.TermsOfService")" style="display: none;">
                                <p>@T("Checkout.TermsOfService.PleaseAccept")</p>
                            </div>
                            <div class="terms-of-service">
                                <input id="termsofservice" checked="checked" type="checkbox" name="termsofservice" />
                                <label for="termsofservice">@T("Checkout.TermsOfService.IAccept")</label>
                                @if (Model.TermsOfServicePopup)
                                {
                                    <a class="read" id="read-terms">@T("Checkout.TermsOfService.Read")</a>
                                    <script type="text/javascript" asp-location="Footer">
                                        $(document).ready(function() {
                                            $('#read-terms').on('click',
                                                function(e) {
                                                    e.preventDefault();
                                                    displayPopupContentFromUrl(
                                                        '@Url.RouteUrl("TopicPopup", new {SystemName = "conditionsofuse"})',
                                                        '@T("Checkout.TermsOfService")');
                                                });
                                        });
                                    </script>
                                }
                                else
                                {
                                    <a class="read" id="read-terms" href="@Url.RouteUrl("Topic", new {SeName = Html.GetTopicSeName("conditionsofuse") })">@T("Checkout.TermsOfService.Read")</a>
                                }
                            </div>
                        }
                        <div class="checkout-buttons">
                            @if (string.IsNullOrEmpty(Model.MinOrderSubtotalWarning) && !Model.HideCheckoutButton)
                            {
                                <script type="text/javascript" asp-location="Footer">
                                    $(document).ready(function () {
                                        $('#checkout').click(function () {
                                            //terms of service
                                            var termOfServiceOk = true;
                                            if ($('#termsofservice').length > 0) {
                                                //terms of service element exists
                                                if (!$('#termsofservice').is(':checked')) {
                                                    $("#terms-of-service-warning-box").dialog();
                                                    termOfServiceOk = false;
                                                } else {
                                                    termOfServiceOk = true;
                                                }
                                            }
                                            return termOfServiceOk;
                                        });
                                    });
                                </script>
                                <button type="submit" id="checkout" name="checkout" value="checkout" class="button-1 checkout-button">
                                    @T("Checkout.Button")
                                </button>
                            }
                        </div>
                        <div class="addon-buttons">
                            @*Payment method buttons (e.g. GoogleCheckoutButton, Paypal Express)*@
                            @foreach (var pm in Model.ButtonPaymentMethodViewComponentNames)
                            {
                                @await Component.InvokeAsync(pm)
                            }
                        </div>
                    }
                </div>
            </div>
            @if (Model.IsEditable)
            {
                @await Component.InvokeAsync("CrossSellProducts")
            }
        </form>
    }
    else
    {
        <div class="no-data">
            @T("ShoppingCart.CartIsEmpty")
        </div>
    }
    @await Component.InvokeAsync("Widget", new { widgetZone = "order_summary_content_after" })
</div>

<script>
    function changeCurrency(value) {
        $(".exchangerate-input").val((parseInt("@(Model.CurrencyCurrent.Rate)")/value));
        calculatePrice();
    }

    function calculatePrice() {
        var baseUnit = $(".unit-price-base-input").val().toFloat();
        var exchangeRate = $(".exchangerate-input").val().toFloat();
        var feeship = $(".feeship-input").val().toFloat();
        var saleoff = $(".saleoff-input").val().toFloat();
        var totalItem = parseFloat((parseFloat((baseUnit * exchangeRate)) + parseFloat(feeship))*(parseFloat((100 - saleoff))/100));
        $("#itemprice").val(totalItem);
        formatCurrency();
    }

    function formatCurrency() {
        var base = $(".unit-price-base-input").val().toFloat();
        $(".unit-price-base-input").val(base.format());
        var feeShip = $(".feeship-input").val().toFloat();
        $(".feeship-input").val(feeShip.format());
        var exhangeRate = $(".exchangerate-input").val().toFloat();
        $(".exchangerate-input").val(exhangeRate.format());
        var price = $("#itemprice").val().toFloat();
        $("#itemprice").val(price.format());
    }

    $(document).ready(function() {
        @if (Model.Items.Count > 0)
        {
           <text> formatCurrency(); </text>
        }
        $(".unit-price-base-input").change(function() {
            calculatePrice();
        });

        $(".exchangerate-input").change(function() {
            calculatePrice();
        });

        $(".feeship-input").change(function() {
            calculatePrice();
        });

        $(".saleoff-input").change(function() {
            calculatePrice();
        });

        
        
    });
    function ShowPopUpDetailProductUpdate(productId,updatecartitem) {
        var customerId = $('#CustomerId').val();
        if (customerId === null || customerId === '') {
            $('#alertModal').modal("show");
            $('#alert-dialog-error').html('@T("Admin.Common.AlertMessage.NoSelectCustomer")');
            return false;
        }
        var queryUrl = '../ShoppingCart/AddProductToCart_Details?productId=' + productId + '&customerId=' + customerId + "&updatecartitemid="+updatecartitem+'&btnId=btnRefresh&formId=order-form';
        OpenWindow(queryUrl, 1000, 800, true);
        return true;
    };
</script>