@model Nop.Web.Models.Catalog.ProductDetailsModel
@using Microsoft.AspNetCore.Http.Extensions
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Seo
@inject SeoSettings seoSettings
@{
    Layout = "_AdminPopupLayout";

    //title
    Html.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);

}
@{
    var addToCartText = "";
    if (Model.AddToCart.UpdatedShoppingCartItemId > 0 && Model.AddToCart.UpdateShoppingCartItemType.HasValue && Model.AddToCart.UpdateShoppingCartItemType.Value == ShoppingCartType.ShoppingCart)
    {
        addToCartText = T("ShoppingCart.AddToCart.Update").Text;
    }
    else
    {
        addToCartText = T("ShoppingCart.AddToCart").Text;
        if (Model.IsRental)
        {
            addToCartText = T("ShoppingCart.Rent").Text;
        }
        if (Model.AddToCart.AvailableForPreOrder)
        {
            addToCartText = T("ShoppingCart.PreOrder").Text;
        }
    }
}

@if (ViewBag.RefreshPage == true)
{
    <script type="text/javascript">
        try {
            window.opener.document.getElementById('@(Context.Request.Query["btnId"])').click();
        } catch (e) {
            console.log(e);
        }
        window.close();
    </script>
}
<form asp-controller="ShoppingCart" asp-action="AddProductToCart_Details" asp-route-shoppingCartTypeId="@((int) ShoppingCartType.ShoppingCart)" asp-route-customerId="@Model.CustomerId" asp-route-productId="@Model.Id" asp-route-formId="@Context.Request.Query["formId"]" asp-route-btnId="@Context.Request.Query["btnId"]" method="post" id="product-details-form">
    <div class="content-header clearfix">
        <h1 class="pull-left">
            @T("Admin.Catalog.Attributes.ProductAttributes.PredefinedValues.EditValueDetails")
        </h1>
        <div class="pull-right">
            <button type="submit" name="save" class="btn bg-blue">
                <i class="fa fa-shopping-cart"></i>
                @addToCartText
            </button>
        </div>
    </div>
    <div itemscope itemtype="http://schema.org/Product" data-productid="@Model.Id">
        <div class="product-essential">
            @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_before_pictures", additionalData = Model.Id })
            <!--product pictures-->
            @await Html.PartialAsync("_ProductDetailsPictures", Model)
            @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_after_pictures", additionalData = Model.Id })
            <div class="overview">

                <div class="product-name">
                    <h1 itemprop="name">
                        @Model.Name
                    </h1>
                </div>
                @if (!string.IsNullOrEmpty(Model.ShortDescription))
                {
                    <div class="short-description">
                        @Html.Raw(Model.ShortDescription)
                    </div>
                }

            </div>
            @if (!string.IsNullOrEmpty(Model.FullDescription))
            {
                <div class="full-description" itemprop="description">
                    @Html.Raw(Model.FullDescription)
                </div>
            }
        </div>
        @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_before_collateral", additionalData = Model.Id })
        <div class="product-collateral">
            <!--associated products-->
            <div class="product-variant-list">
                @foreach (var variant in Model.AssociatedProducts)
                {
                    <div class="product-variant-line" data-productid="@variant.Id">
                        @if (!string.IsNullOrWhiteSpace(variant.DefaultPictureModel.ImageUrl))
                        {
                            <div class="variant-picture">
                                <img alt="@variant.DefaultPictureModel.AlternateText" src="@variant.DefaultPictureModel.ImageUrl"
                                     title="@variant.DefaultPictureModel.Title" id="main-product-img-@variant.Id" />
                            </div>
                        }
                        <div class="variant-overview">
                            @if (!string.IsNullOrWhiteSpace(variant.Name))
                            {
                                <div class="variant-name">
                                    @variant.Name
                                </div>
                            }
                            @if (!string.IsNullOrWhiteSpace(variant.ShortDescription))
                            {
                                <div class="variant-description">
                                    @Html.Raw(variant.ShortDescription)
                                </div>
                            }
                            @*<!--availability-->
                                @await Html.PartialAsync("_Availability", variant)
                                <!--SKU, MAN, GTIN, vendor-->
                                @await Html.PartialAsync("_SKU_Man_GTIN_Ven", variant)
                                <!--delivery-->
                                @await Html.PartialAsync("_DeliveryInfo", variant)
                                <!--sample download-->
                                @await Html.PartialAsync("_DownloadSample", variant)*@
                            <!--attributes-->
                            @{
                                var dataDictAttributes = new ViewDataDictionary(ViewData);
                                dataDictAttributes.TemplateInfo.HtmlFieldPrefix = $"attributes_{variant.Id}";
                                @await Html.PartialAsync("_ProductAttributes", variant.ProductAttributes, dataDictAttributes)
                            }
                            <!--gift card-->
                            @{
                                var dataDictGiftCard = new ViewDataDictionary(ViewData);
                                dataDictGiftCard.TemplateInfo.HtmlFieldPrefix = $"giftcard_{variant.Id}";
                                @await Html.PartialAsync("_GiftCardInfo", variant.GiftCard, dataDictGiftCard)
                            }
                            <!--rental info-->
                            @{
                                var dataDictRental = new ViewDataDictionary(ViewData);
                                dataDictRental.TemplateInfo.HtmlFieldPrefix = $"rental_{variant.Id}";
                                @await Html.PartialAsync("_RentalInfo", variant, dataDictRental)
                            }
                            <!--price & add to cart-->
                            @{
                                var dataDictPrice = new ViewDataDictionary(ViewData);
                                dataDictPrice.TemplateInfo.HtmlFieldPrefix = $"price_{variant.Id}";
                                @await Html.PartialAsync("_ProductPrice", variant.ProductPrice, dataDictPrice)
                            }
                            <!--price breaks-->
                            @await Html.PartialAsync("_ProductTierPrices", variant.TierPrices)
                            @{
                                var dataDictAddToCart = new ViewDataDictionary(ViewData);
                                dataDictAddToCart.TemplateInfo.HtmlFieldPrefix = $"addtocart_{variant.Id}";
                                @await Html.PartialAsync("_AddToCart", variant.AddToCart, dataDictAddToCart)
                            }

                        </div>
                    </div>
                }
                @if (Model.AssociatedProducts.Count == 0)
                {
                    <div class="no-associated-products">
                        @T("Products.NoAssociatedProducts")
                    </div>
                }
            </div>

        </div>

    </div>
</form>
