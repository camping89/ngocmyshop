@model ProductListModel
@inject AdminAreaSettings adminAreaSettings

@using Nop.Core.Domain.Catalog

@{
    var defaultGridPageSize = adminAreaSettings.DefaultGridPageSize;
    var gridPageSizes = adminAreaSettings.GridPageSizes;

    //page title
    //ViewBag.Title = T("Admin.Catalog.Products").Text;
    //active menu item (system name)
    //Html.SetActiveMenuItemSystemName("Products");
    var display = "none";
}

@if ((bool)ViewData["ShowProducts"])
{
    display = string.Empty;
}
else
{
    <p>@T("Admin.Catalog.Products.AddNewOrder.AlertOnlyOneProductInOrder")</p>
}
<div style="">
    <form asp-controller="Product" asp-action="List" method="post">
        <div class="content-header clearfix">
            <h1 class="pull-left">
                @T("Admin.Catalog.Products")
            </h1>
            <div class="pull-right">
                @*<button type="button" id="add-product-to-cart" class="btn bg-blue">
                        <i class="fa fa-plus-square"></i>
                        @T("Admin.Common.AddToCart")
                    </button>*@
                @*<button type="button" id="delete-selected" class="btn bg-red">
                        <i class="fa fa-trash-o"></i>
                        @T("Admin.Common.Delete.Selected")
                    </button>
                    @await Component.InvokeAsync("AdminWidget", new { widgetZone = "admin_product_list_buttons" })*@
            </div>
        </div>

        <div class="content">
            <div class="form-horizontal">
                <div class="panel-group">
                    <div class="panel panel-default panel-search">
                        <div class="panel-body">
                            <div class="row">
                                <div class="col-md-5">
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            <nop-label asp-for="SearchProductName" />
                                        </div>
                                        <div class="col-md-8">
                                            <nop-editor asp-for="SearchProductName" />
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-7">

                                    <div class="form-group">
                                        <div class="col-md-4">
                                            <nop-label asp-for="GoDirectlyToSku" />
                                        </div>
                                        <div class="col-md-8">
                                            <div class="input-group input-group-short">
                                                <nop-editor asp-for="GoDirectlyToSku" />
                                                <span class="input-group-btn">
                                                    <button type="submit" id="go-to-product-by-sku" name="go-to-product-by-sku" class="btn btn-info btn-flat">
                                                        @T("Admin.Common.Go")
                                                    </button>
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-7 col-md-offset-5">
                                    <button type="button" id="search-products" class="btn btn-primary btn-search">
                                        <i class="fa fa-search"></i>
                                        @T("Admin.Common.Search")
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="panel panel-default">
                        <div class="panel-body">
                            <div id="products-grid"></div>

                            <script type="text/javascript">
                            $(document).ready(function() {
                                $("#products-grid").kendoGrid({
                                    dataSource: {
                                        type: "json",
                                        transport: {
                                            read: {
                                                url: "@Html.Raw(Url.Action("ProductList", "Product"))",
                                                type: "POST",
                                                dataType: "json",
                                                data: additionalData
                                            }
                                        },
                                        schema: {
                                            data: "Data",
                                            total: "Total",
                                            errors: "Errors"
                                        },
                                        error: function(e) {
                                            display_kendoui_grid_error(e);
                                            // Cancel the changes
                                            this.cancelChanges();
                                        },
                                        pageSize: @(defaultGridPageSize),
                                        serverPaging: true,
                                        serverFiltering: true,
                                        serverSorting: true
                                    },
                                    pageable: {
                                        refresh: true,
                                        pageSizes: [@(gridPageSizes)],
                                        @await Html.PartialAsync("_GridPagerMessages")
                                    },
                                    editable: {
                                        confirmation: "@T("Admin.Common.DeleteConfirmation")",
                                        mode: "inline"
                                    },
                                    scrollable: false,
                                    dataBound: onDataBound,
                                    columns: [
                                        {
                                            field: "PictureThumbnailUrl",
                                            title: "@T("Admin.Catalog.Products.Fields.PictureThumbnailUrl")",
                                            template: '<img src="#=PictureThumbnailUrl#" />',
                                            width: 100
                                        },
                                        {
                                            field: "Sku",
                                            title: "@T("Admin.Catalog.Products.Fields.Sku")",
                                            width: 100
                                        },
                                        {
                                            field: "Name",
                                            title: "@T("Admin.Catalog.Products.Fields.Name")",
                                            width: 300
                                        },
                                        {
                                            field: "UnitPriceUsd",
                                            title: "@T("Admin.Catalog.Products.Fields.UnitPriceBase")",
                                            width: 150,
                                            //if not a grouped product, then display
                                            template: "# if(ProductTypeId != @((int) ProductType.GroupedProduct)) {# #:UnitPriceUsd# #}  #"
                                        },
                                        {
                                            field: "CurrencyMappedName",
                                            title: "@T("Admin.Catalog.Products.Fields.Currency")",
                                            width: 100
                                        },
                                        {
                                            field: "OrderingFee",
                                            title: "@T("Admin.Catalog.Products.Fields.OrderingFee")",
                                            width: 100
                                        }, {
                                            field: "Price",
                                            title: "@T("Admin.Catalog.Products.Fields.Price")",
                                            width: 150,
                                            //if not a grouped product, then display
                                            template: "# if(ProductTypeId != @((int) ProductType.GroupedProduct)) {# #:Price# #}  #"
                                        }, {
                                            field: "StockQuantityStr",
                                            title: "@T("Admin.Catalog.Products.Fields.StockQuantity")",
                                            width: 100
                                        }@*, {
                                            field: "ProductTypeName",
                                            title: "@T("Admin.Catalog.Products.Fields.ProductType")",
                                            width: 100
                                        }*@, {
                                            field: "Published",
                                            title: "@T("Admin.Catalog.Products.Fields.Published")",
                                            width: 100,
                                            template: '# if(Published) {# <i class="fa fa-check true-icon"></i> #} else {# <i class="fa fa-close false-icon"></i> #} #'
                                        }, {
                                            field: "Id",
                                            title: "@T("Admin.Common.Edit")",
                                            width: 100,
                                            headerAttributes: { style: "text-align:center" },
                                            attributes: { style: "text-align:center" },
                                            @*template: '<a class="btn btn-default" href="Edit/#=Id#"><i class="fa fa-shopping-cart"></i>@T("Admin.Common.AddToCart")</a>'*@
                                            @*template: '<button type="button" class="btn btn-default" onclick="javascript:OpenWindow(\'../ShoppingCart/ProductToCartDetail/#=Id#?customerId=@(Model.)\', 800, 600, true); return false;"><i class="fa fa-shopping-cart"></i>@T("Admin.Common.AddToCart")</a>'*@
                                            template: '<button type="button" class="btn btn-default" onclick="ShowPopUpDetailProduct(#=Id#); return true;"><i class="fa fa-shopping-cart"></i>@T("Admin.Common.AddToCart")</button>'
                                        }
                                    ]
                                });
                            });
                            </script>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <script type="text/javascript">
        function ShowPopUpDetailProduct(productId) {
            var customerId = $('#CustomerId').val();
            if (customerId === null || customerId === '') {
                $('#alertModal').modal("show");
                $('#alert-dialog-error').html('@T("Admin.Common.AlertMessage.NoSelectCustomer")');
                return false;
            }
            var queryUrl = '../ShoppingCart/AddProductToCart_Details?productId=' + productId + '&customerId=' + customerId+'&btnId=btnRefresh&formId=order-form';
            OpenWindow(queryUrl, 1000, 800, true);
            return true;
        };
        var selectedIds = [];

        $(document).ready(function () {
            //search button
            $('#search-products').click(function () {
                //search
                var grid = $('#products-grid').data('kendoGrid');
                grid.dataSource.page(1); //new search. Set page size to 1
                //grid.dataSource.read(); we already loaded the grid above using "page" function
                //clear selected checkboxes
                $('.checkboxGroups').attr('checked', false).change();
                selectedIds = [];
                return false;
            });

            $("#@Html.IdFor(model => model.SearchProductName)").keydown(function (event) {
                if (event.keyCode === 13) {
                    $("#search-products").click();
                    return false;
                }
            });

            $("#@Html.IdFor(model => model.GoDirectlyToSku)").keydown(function (event) {
                if (event.keyCode === 13) {
                    $("#go-to-product-by-sku").click();
                    return false;
                }
            });
            //delete selected
            $('#delete-selected').click(function(e) {
                e.preventDefault();

                var postData = {
                    selectedIds: selectedIds
                };
                addAntiForgeryToken(postData);

                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("DeleteSelected", "Product"))",
                    data: postData,
                    complete: function(data) {
                        //reload grid
                        var grid = $('#products-grid').data('kendoGrid');
                        grid.dataSource.read();
                    },
                    error: function(xhr, ajaxOptions, thrownError) {
                        alert(thrownError);
                    },
                    traditional: true
                });
                return false;
            });

            $('#mastercheckbox').click(function () {
                $('.checkboxGroups').attr('checked', $(this).is(':checked')).change();
            });

            //wire up checkboxes.
            $('#products-grid').on('change', 'input[type=checkbox][id!=mastercheckbox][class=checkboxGroups]', function (e) {
                var $check = $(this);
                if ($check.is(":checked") == true) {
                    var checked = jQuery.inArray($check.val(), selectedIds);
                    if (checked == -1) {
                        //add id to selectedIds.
                        selectedIds.push($check.val());
                    }
                }
                else {
                    var checked = jQuery.inArray($check.val(), selectedIds);
                    if (checked > -1) {
                        //remove id from selectedIds.
                        selectedIds = $.grep(selectedIds, function (item, index) {
                            return item != $check.val();
                        });
                    }
                }
                updateMasterCheckbox();
            });
        });

        function additionalData() {
            var data = {
                SearchProductName: $('#@Html.IdFor(model => model.SearchProductName)').val(),
                SearchCategoryId: $('#SearchCategoryId').val(),
                SearchIncludeSubCategories: $('#@Html.IdFor(model => model.SearchIncludeSubCategories)').is(':checked'),
                SearchManufacturerId: $('#SearchManufacturerId').val(),
                SearchStoreId: $('#SearchStoreId').val(),
                SearchWarehouseId: $('#SearchWarehouseId').val(),
                SearchVendorId: $('#SearchVendorId').val(),
                SearchProductTypeId: $('#SearchProductTypeId').val(),
                SearchPublishedId: $('#SearchPublishedId').val()
            };
            addAntiForgeryToken(data);
            return data;
        }

        function onDataBound(e) {
            $('#products-grid input[type=checkbox][id!=mastercheckbox][class=checkboxGroups]').each(function () {
                var currentId = $(this).val();
                var checked = jQuery.inArray(currentId, selectedIds);
                //set checked based on if current checkbox's value is in selectedIds.
                $(this).attr('checked', checked > -1);
            });

            updateMasterCheckbox();
        }

        function updateMasterCheckbox() {
            var numChkBoxes = $('#products-grid input[type=checkbox][id!=mastercheckbox][class=checkboxGroups]').length;
            var numChkBoxesChecked = $('#products-grid input[type=checkbox][id!=mastercheckbox][class=checkboxGroups]:checked').length;
            $('#mastercheckbox').attr('checked', numChkBoxes == numChkBoxesChecked && numChkBoxes > 0);
        }
        </script>
    </form>
</div>



@await Html.PartialAsync("_AlertDialog")
<script type="text/javascript">
    $(document).ready(function () {
        //$('#exportexcel-selected').click(function (e) {
        //    e.preventDefault();
        //    var ids = selectedIds.join(",");
        //    $('#export-excel-selected-form #selectedIds').val(ids);
        //    $('#export-excel-selected-form').submit();
        //    return false;
        //});

        $('#add-product-to-cart').click(function (e) {
            e.preventDefault();
            var customerId = $('#CustomerId').val();
            if (customerId === null || customerId === '') {
                $('#alertModal').modal("show");
                $('#alert-dialog-error').html('@T("Admin.Common.AlertMessage.NoSelectCustomer")');
                return;
            }
            if (selectedIds.length === 0) {
                $('#alertModal').modal("show");
                $('#alert-dialog-error').html('@T("Admin.AddProductToCart.ChoosesProductAlert")');
                return;
            }
            var postData = { productIds: selectedIds, customerId: customerId,quantity:1 };
            addAntiForgeryToken(postData);
            $.ajax({
                cache: false,
                type: "POST",
                url: "@(Url.Action("AddProductToCart_Catalog", "ShoppingCart"))",
                data: postData,
                complete: function(data) {
                    if (data.responseJSON.success === true) {
                        alert('@T("Admin.AddProductToCartSuccess")');
                        window.location.href = "@(Url.Action("CreateOrder","ShoppingCart"))?customerId=" + customerId;
                    } else {
                        //var messeageStr = '<ul>';
                        //var arrMessage = data.responseJSON.message;
                        //for (var i = 0; i < arrMessage.length; i++) {
                        //    messeageStr += '<li><strong>'+arrMessage[i]+'</strong></li>';
                        //}
                        $('#alertModal').modal("show");
                        $('#alert-dialog-error').html(data.responseJSON.message);
                    }

                    selectedIds = [];
                    //reload grid
                    var grid = $('#products-grid').data('kendoGrid');
                    grid.dataSource.read();
                },
                error: function(xhr, ajaxOptions, thrownError) {
                    alert(thrownError);
                },
                traditional: true
            });
        });
    });
</script>
