@model OrderListModel
@inject AdminAreaSettings adminAreaSettings
@inject IStoreService storeService

@using Nop.Services.Stores

@{
    var defaultGridPageSize = adminAreaSettings.DefaultGridPageSize;
    var gridPageSizes = adminAreaSettings.GridPageSizes;
    var stores = storeService.GetAllStores();

    //page title
    ViewBag.Title = T("Admin.Orders").Text;
    //active menu item (system name)
    Html.SetActiveMenuItemSystemName("Orders");
}
<style>
    .k-hierarchy-cell:hover, .k-hierarchy-cell:focus {
        cursor: pointer;
    }
</style>


<form asp-controller="Order" asp-action="List" method="post">
    <div class="content-header clearfix">
        <h1 class="pull-left">
            @T("Admin.Orders")
        </h1>
        <div class="pull-right">
            <div class="btn-group">
                <button type="button" class="btn btn-success">
                    <i class="fa fa-download"></i>
                    @T("Admin.Common.Export")
                </button>
                <button type="button" class="btn btn-success dropdown-toggle" data-toggle="dropdown" aria-expanded="false">
                    <span class="caret"></span>
                    <span class="sr-only">&nbsp;</span>
                </button>
                <ul class="dropdown-menu" role="menu">
                    <li>
                        <button type="submit" name="exportxml-all">
                            <i class="fa fa-file-code-o"></i>
                            @T("Admin.Common.ExportToXml.All")
                        </button>
                    </li>
                    <li>
                        <button type="button" id="exportxml-selected">
                            <i class="fa fa-file-code-o"></i>
                            @T("Admin.Common.ExportToXml.Selected")
                        </button>
                    </li>
                    <li class="divider"></li>
                    @*<li>
                            <button type="submit" name="exportexcel-all">
                                <i class="fa fa-file-excel-o"></i>
                                @T("Admin.Common.ExportToExcel.All")
                            </button>
                        </li>
                        <li>
                            <button type="button" id="exportexcel-selected">
                                <i class="fa fa-file-excel-o"></i>
                                @T("Admin.Common.ExportToExcel.Selected")
                            </button>
                        </li>*@
                    <li>
                        <button type="button" id="exportexcel-invoice-vendor-selected">
                            <i class="fa fa-file-excel-o"></i>
                            @T("Admin.Common.ExportToExcel.VendorInvoices.Selected")
                        </button>
                    </li>
                    <li>
                        <button type="submit" name="exportexcel-orderbasic-all">
                            <i class="fa fa-file-excel-o"></i>
                            @T("Admin.Common.ExportToExcel.VendorInvoices.All")
                        </button>
                    </li>
                </ul>
            </div>
            <div class="btn-group">
                <button type="button" class="btn bg-purple">
                    <i class="fa fa-file-pdf-o"></i>
                    @T("Admin.Orders.PdfInvoices")
                </button>
                <button type="button" class="btn bg-purple dropdown-toggle" data-toggle="dropdown" aria-expanded="false">
                    <span class="caret"></span>
                    <span class="sr-only">&nbsp;</span>
                </button>
                <ul class="dropdown-menu" role="menu">
                    <li>
                        <button type="submit" name="pdf-invoice-all">
                            @T("Admin.Orders.PdfInvoices.All")
                        </button>
                    </li>
                    <li>
                        <button type="button" id="pdf-invoice-selected">
                            @T("Admin.Orders.PdfInvoices.Selected")
                        </button>
                    </li>
                    <li>
                        <button type="button" id="pdf-invoice-vendor-selected">
                            @T("Admin.Orders.PdfVendorInvoices.Selected")
                        </button>
                    </li>
                </ul>
            </div>
            @await Component.InvokeAsync("AdminWidget", new { widgetZone = "admin_order_list_buttons" })
        </div>
    </div>
    <div class="content">
        <div class="form-horizontal">
            <div class="panel-group">
                <div class="panel panel-default panel-search">
                    <div class="panel-body">
                        <div class="row">
                            <div class="col-md-5">
                                <div class="form-group">
                                    <div class="col-md-4">
                                        <nop-label asp-for="StartDate" />
                                    </div>
                                    <div class="col-md-8">
                                        <nop-editor asp-for="StartDate" />
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="col-md-4">
                                        <nop-label asp-for="EndDate" />
                                    </div>
                                    <div class="col-md-8">
                                        <nop-editor asp-for="EndDate" />
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="col-md-4">
                                        <nop-label asp-for="TodayFilter" />
                                    </div>
                                    <div class="col-md-8">
                                        <nop-editor asp-for="TodayFilter" />
                                    </div>
                                </div>
                                @*<div class="form-group" @(Model.AvailableWarehouses.SelectionIsNotPossible() ? Html.Raw("style=\"display:none\"") : null)>
                                        <div class="col-md-4">
                                            <nop-label asp-for="WarehouseId" />
                                        </div>
                                        <div class="col-md-8">
                                            <nop-select asp-for="WarehouseId" asp-items="Model.AvailableWarehouses" />
                                        </div>
                                    </div>*@
                                <div class="form-group">
                                    <div class="col-md-4">
                                        <nop-label asp-for="ProductId" />
                                    </div>
                                    <div class="col-md-8">
                                        <input type="text" id="search-product-name" autocomplete="off" class="form-control" />
                                        <span id="search-product-friendly-name"></span>
                                        <button type="button" id="search-product-clear" class="btn bg-gray" style="display: none; margin-top: 5px;">@T("Admin.Common.Clear")</button>
                                        <input asp-for="ProductId" autocomplete="off" style="display:none;" />
                                        <script type="text/javascript">
                                            $(document).ready(function() {
                                                $('#search-product-name').autocomplete({
                                                    delay: 500,
                                                    minLength: 3,
                                                    source: '@(Url.Action("ProductSearchAutoComplete"))',
                                                    select: function(event, ui) {
                                                        $('#@Html.IdFor(model => model.ProductId)').val(ui.item.productid);
                                                        $('#search-product-friendly-name').text(ui.item.label);

                                                        $('#search-product-clear').show();
                                                        return false;
                                                    }
                                                });

                                                //remove button
                                                $('#search-product-clear').click(function() {
                                                    $('#@Html.IdFor(model => model.ProductId)').val('0');
                                                    $('#search-product-friendly-name').text('');
                                                    $('#search-product-clear').hide();
                                                    return false;
                                                });
                                            });
                                        </script>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="col-md-4">
                                        <nop-label asp-for="LinkSourceProduct" />
                                    </div>
                                    <div class="col-md-8">
                                        <nop-editor asp-for="LinkSourceProduct" />
                                    </div>
                                </div>
                                <div class="form-group" @(Model.IsLoggedInAsVendor ? Html.Raw("style='display: none;' ") : null)>
                                    <div class="col-md-4">
                                        <nop-label asp-for="OrderStatusIds" />
                                    </div>
                                    <div class="col-md-8">
                                        <nop-select asp-for="OrderStatusIds" asp-items="Model.AvailableOrderStatuses" asp-multiple="true" />
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="col-md-4">
                                        <nop-label asp-for="PaymentStatusIds" />
                                    </div>
                                    <div class="col-md-8">
                                        <nop-select asp-for="PaymentStatusIds" asp-items="Model.AvailablePaymentStatuses" asp-multiple="true" />
                                    </div>
                                </div>
                                <div class="form-group" @(Model.IsLoggedInAsVendor ? Html.Raw("style='display: none;' ") : null)>
                                    <div class="col-md-4">
                                        <nop-label asp-for="ShippingStatusIds" />
                                    </div>
                                    <div class="col-md-8">
                                        <nop-select asp-for="ShippingStatusIds" asp-items="Model.AvailableShippingStatuses" asp-multiple="true" />
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-7">
                                <div class="form-group">
                                    <div class="col-md-4">
                                        <nop-label asp-for="IsOrderCheckout" />
                                    </div>
                                    <div class="col-md-8">
                                        <nop-select asp-for="IsOrderCheckout" asp-items="Model.AvailableOrderCheckoutStatus" />
                                    </div>
                                </div>
                                <div class="form-group" @(Model.AvailableStores.SelectionIsNotPossible() ? Html.Raw("style=\"display:none\"") : null)>
                                    <div class="col-md-4">
                                        <nop-label asp-for="StoreId" />
                                    </div>
                                    <div class="col-md-8">
                                        <nop-select asp-for="StoreId" asp-items="Model.AvailableStores" />
                                    </div>
                                </div>
                                <div class="form-group" @(Model.AvailableVendors.SelectionIsNotPossible() || Model.IsLoggedInAsVendor ? Html.Raw("style='display: none;' ") : null)>
                                    <div class="col-md-4">
                                        <nop-label asp-for="VendorId" />
                                    </div>
                                    <div class="col-md-8">
                                        <nop-select asp-for="VendorId" asp-items="Model.AvailableVendors" />
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="col-md-4">
                                        <nop-label asp-for="PackageOrderItemCode" />
                                    </div>
                                    <div class="col-md-8">
                                        <nop-editor asp-for="PackageOrderItemCode" />
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="col-md-4">
                                        <nop-label asp-for="LinkFacebook" />
                                    </div>
                                    <div class="col-md-8">
                                        <nop-editor asp-for="LinkFacebook" />
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="col-md-4">
                                        <nop-label asp-for="BillingPhone" />
                                    </div>
                                    <div class="col-md-8">
                                        <nop-editor asp-for="BillingPhone" />
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="col-md-4">
                                        <nop-label asp-for="BillingFullName" />
                                    </div>
                                    <div class="col-md-8">
                                        <nop-editor asp-for="BillingFullName" />
                                    </div>
                                </div>
                                @*<div class="form-group" @(Model.AvailableCountries.SelectionIsNotPossible() ? Html.Raw("style=\"display:none\"") : null)>
                                        <div class="col-md-4">
                                            <nop-label asp-for="BillingCountryId" />
                                        </div>
                                        <div class="col-md-8">
                                            <nop-select asp-for="BillingCountryId" asp-items="Model.AvailableCountries" />
                                        </div>
                                    </div>
                                    <div class="form-group" @(Model.AvailablePaymentMethods.SelectionIsNotPossible() || Model.IsLoggedInAsVendor ? Html.Raw("style='display: none;' ") : null)>
                                        <div class="col-md-4">
                                            <nop-label asp-for="PaymentMethodSystemName" />
                                        </div>
                                        <div class="col-md-8">
                                            <nop-select asp-for="PaymentMethodSystemName" asp-items="Model.AvailablePaymentMethods" />
                                        </div>
                                    </div>*@
                                <div class="form-group">
                                    <div class="col-md-4">
                                        <nop-label asp-for="OrderNotes" />
                                    </div>
                                    <div class="col-md-8">
                                        <nop-editor asp-for="OrderNotes" />
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="col-md-4">
                                        <nop-label asp-for="GoDirectlyToCustomOrderNumber" />
                                    </div>
                                    <div class="col-md-8">
                                        <div class="input-group input-group-short">
                                            <nop-editor asp-for="GoDirectlyToCustomOrderNumber" />
                                            <span class="input-group-btn">
                                                <button type="submit" id="go-to-order-by-number" name="go-to-order-by-number" class="btn btn-info btn-flat">
                                                    @T("Admin.Common.Go")
                                                </button>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-7 col-md-offset-5">
                                <button type="button" id="search-orders" class="btn btn-primary btn-search">
                                    <i class="fa fa-search"></i>
                                    @T("Admin.Common.Search")
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="panel panel-default">
                    <div class="panel-body">
                        @*<button class="k-button" id="expand">@T("Admin.Common.ExpandAll")</button>*@
                        <button type="button" class="k-button" id="collapse" style="margin-bottom: 10px;">@T("Admin.Common.CollapseAll")</button>
                        <div id="orders-grid"></div>

                        <script type="text/javascript">
                            $(document).ready(function() {
                                var grid =   $("#orders-grid").kendoGrid({
                                    dataSource: {
                                        type: "json",
                                        transport: {
                                            read: {
                                                url: "@Html.Raw(Url.Action("OrderList", "Order"))",
                                                type: "POST",
                                                dataType: "json",
                                                data: additionalData
                                            }
                                        },
                                        schema: {
                                            data: "Data",
                                            total: "Total",
                                            errors: "Errors"
                                        },
                                        requestEnd: function(e) {
                                            if (e.type == "read") {
                                                var response = e.response;
                                                if (response) {
                                                    //store extra data
                                                    reportAggregates = e.response["ExtraData"];
                                                }
                                            }
                                        },
                                        error: function(e) {
                                            display_kendoui_grid_error(e);
                                            // Cancel the changes
                                            this.cancelChanges();
                                        },
                                        pageSize: @(defaultGridPageSize),
                                        serverPaging: true,
                                        serverFiltering: true,
                                        serverSorting: true
                                    },
                                    sortable: {
                                        mode: "single",
                                        allowUnsort: false
                                    },
                                    pageable: {
                                        refresh: true,
                                        pageSizes: [@(gridPageSizes)],
                                        @await Html.PartialAsync("_GridPagerMessages")
                                    },
                                    editable: {
                                        confirmation: "@T("Admin.Common.DeleteConfirmation")",
                                        mode: "inline"
                                    },
                                    //details grid
                                    detailInit: detailInit,
                                    scrollable: false,
                                    dataBound: onDataBound,
                                    columns: [
                                        {
                                            field: "Id",
                                            headerTemplate: "<input id='mastercheckbox' type='checkbox'/>",
                                            headerAttributes: { style: "text-align:center" },
                                            attributes: { style: "text-align:center" },
                                            template:
                                                "<div style='display:block;padding: 50% 30%;' onclick='setChecked(#=Id#);'><input onclick='setChecked(#=Id#);' id='ckb#=Id#' type='checkbox' value='#=Id#' class='checkboxGroups'/></div>",
                                            width: 50,
                                            sortable: false
                                        }, {
                                            field: "CustomOrderNumber",
                                            title: "@T("Admin.Orders.Fields.CustomOrderNumber")",
                                            width: 80,
                                            sortable: false
                                        },
                                        @if (!Model.IsLoggedInAsVendor)
                            {
                                //a vendor does not have access to this functionality
<text>{
                                            field: "OrderStatus",
                                            title: "@T("Admin.Orders.Fields.OrderStatus")",
                                            width: 150,
                                            sortable: true,
                                            template: '<span class="grid-report-item ' +
                                                '# if(OrderStatusId == 5) {# gray #} #' +
                                                '# if(OrderStatusId == 10) {# yellow #} #' +
                                                '# if(OrderStatusId == 20) {# blue #} #' +
                                                '# if(OrderStatusId == 30) {# green #} #' +
                                                '# if(OrderStatusId == 40) {# red #} #' +
                                                '">#=OrderStatus#</span>'
                                        },</text>
                        }
                                        {
                                            field: "PaymentStatus",
                                            title: "@T("Admin.Orders.Fields.PaymentStatus")",
                                            width: 150,
                                            sortable: false
                                        },
                                        @if (!Model.IsLoggedInAsVendor)
                            {
                                //a vendor does not have access to this functionality
<text>{
                                            field: "ShippingStatus",
                                            title: "@T("Admin.Orders.Fields.ShippingStatus")",
                                            width: 150,
                                            sortable: false
                                        },</text>
                        }
                                        {
                                            field: "CustomerFullName",
                                            title: "@T("Admin.Orders.Fields.Customer")",
                                            width: 150,
                                            template: '<p>#=CustomerFullName#</p>' +
                                                '<p>#=CustomerPhone#</p>',
                                            sortable: false
                                        },
                                        {
                                            field: "CustomerLinkFacebook",
                                            title: "@T("Admin.Customers.Customers.Fields.LinkFacebook")",
                                            width: 200,
                                            template: '<a target="_blank" href="#=CustomerLinkFacebook#">#=CustomerLinkFacebook#</a>'
                                        },
                                        {
                                            field: "StoreName",
                                            hidden: @(stores.Count > 1 ? "false" : "true"),
                                            title: "@T("Admin.Orders.Fields.Store")",
                                            width: 100,
                                            sortable: false
                                        }, {
                                            field: "CreatedOn",
                                            title: "@T("Admin.Orders.Fields.CreatedOn")",
                                            width: 150,
                                            type: "date",
                                            format: "{0:G}",
                                            sortable: true
                                        }, {
                                            field: "OrderTotalWithoutWeightCost",
                                            title: "@T("Admin.Orders.Fields.OrderTotalWithoutWeightCost")",
                                            width: 100,
                                            template: '#=OrderTotalWithoutWeightCost#',
                                            sortable: false

                                        }, {
                                            field: "WeightCost",
                                            title: "@T("Admin.Orders.Fields.WeightCost")",
                                            width: 100,
                                            template: '#=WeightCost#',
                                            sortable: false
                                        },
                                        @if (!Model.IsLoggedInAsVendor)
                            {
                                //a vendor does not have access to this functionality
<text>{
                                            field: "OrderTotal",
                                            title: "@T("Admin.Orders.Fields.OrderTotal")",
                                            width: 250,
                                            sortable: true,
                                            footerTemplate:
                                                '<div><strong>@T("Admin.Orders.Report.Summary")</strong></div>' +
                                                    '<div>@T("Admin.Orders.Report.Profit") <span id=\"aggregator-profit-block\"></span></div>' +
                                                    '<div>@T("Admin.Orders.Report.Shipping") <span id=\"aggregator-shipping-block\"></span></div>' +
                                                    '<div>@T("Admin.Orders.Report.Tax") <span id=\"aggregator-tax-block\"></span></div>' +
                                                    '<div>@T("Admin.Orders.Report.Total") <span id=\"aggregator-total-block\"></span></div>'
                                        },</text>
                        }
                                        {
                                            field: "AdminNote",
                                            title: "@T("Admin.Orders.Fields.AdminNote")",
                                            width: 150,
                                            template: '#=AdminNote#',
                                            sortable: false
                                        },
                                        {
                                            field: "Id",
                                            title: "@T("Admin.Common.View")",
                                            width: 50,
                                            headerAttributes: { style: "text-align:center" },
                                            attributes: { style: "text-align:center" },
                                            template:
                                                '<a class="btn btn-default" href="Edit/#=Id#"><i class="fa fa-eye"></i>@T("Admin.Common.View")</a>',
                                            sortable: false
                                        }
                                    ]
                                });

                                // handle grid row clicks for detail row expansion
                                grid.on("click","td.k-hierarchy-cell",function(e) {
                                    var $target = $(e.target);
                                    // if you have links or other things in your rows that you don't want to
                                    // trigger the detail row expansion, use an if statement to ignore them.
                                    if (!$target.hasClass("sample-link")){
                                        var $this = $(this);
                                        var $link = $this.find(".k-icon");
                                        $link.click();
                                    }
                                });
                            });


                            //details grid
                            function detailInit(e) {
                                $("<div/>").appendTo(e.detailCell).kendoGrid({
                                    dataSource: {
                                        type: "json",
                                        transport: {
                                            read: {
                                                url: "@Html.Raw(Url.Action("OrderItemsByOrderId", "Order"))?orderId=" +
                                                    e.data.Id,
                                                type: "POST",
                                                dataType: "json",
                                                data: addAntiForgeryToken
                                            },
                                            update: {
                                                url: "@Html.Raw(Url.Action("UpdateOrderItem", "Order"))",
                                                type: "POST",
                                                dataType: "json",
                                                data: addAntiForgeryToken
                                            }
                                        },
                                        schema: {
                                            data: "Data",
                                            total: "Total",
                                            errors: "Errors",
                                            model: {
                                                id: "Id",
                                                fields: {
                                                    OrderId: { editable: false, type: "number" },
                                                    PackageId: { editable: true, type: "string" },
                                                    PackageOrderId: { editable: true, type: "string" },
                                                    PackageItemCode: { editable: true, type: "string" },
                                                    PackageItemProcessedDatetime: { editable: true, type: "date" },
                                                    PictureThumbnailUrl: { editable: false, type: "string" },
                                                    ProductName: { editable: false, type: "string" },
                                                    TotalWithoutWeightCost: { editable: false, type: "string" },
                                                    WeightCostDec: { editable: true, type: "string" },
                                                    UnitWeightCost: { editable: true, type: "string" },
                                                    ItemWeight: { editable: true, type: "string" },
                                                    SubTotalInclTax: { editable: false, type: "string" },
                                                    IsOrderCheckout: { editable: true, type: "boolean" }
                                                }
                                            }

                                        },
                                        requestEnd: function(e) {
                                            if (e.type == "update") {
                                                //this.read();
                                                var grid = $('#orders-grid').data('kendoGrid');
                                                grid.dataSource.read();
                                            }
                                        },
                                        error: function(e) {
                                            display_kendoui_grid_error(e);
                                            // Cancel the changes
                                            this.cancelChanges();
                                        },
                                        serverPaging: true,
                                        serverFiltering: true
                                    },
                                    edit: grid_edit,
                                    editable: {
                                        confirmation: "@T("Admin.Common.DeleteConfirmation")",
                                        mode: "popup"
                                    },
                                    scrollable: false,
                                    pageable: {
                                        refresh: true,
                                        numeric: false,
                                        previousNext: false,
                                        info: false,
                                        @await Html.PartialAsync("_GridPagerMessages")
                                    },
                                    columns: [
                                        {
                                            field: "Id",
                                            title: "@T("Admin.Orders.OrderItemId")",
                                            width: 50,
                                            template: '<p>#=OrderId#.#=Id#</p>'
                                        },{
                                            field: "PictureThumbnailUrl",
                                            title: "@T("Admin.Orders.Products.Picture")",
                                            template: '<img src="#=PictureThumbnailUrl#" />',
                                            width: 100
                                        }, {
                                            field: "ProductName",
                                            title: "@T("Admin.Orders.Products.ProductName")",
                                            template: 'Product name: #=ProductName#' +
                                                '<p>#=AttributeInfo#</p>' +
                                                '<p>#=RecurringInfo#</p>',
                                            width: 250
                                        }, {
                                            field: "TotalWithoutWeightCost",
                                            title: "@T("Admin.Orders.Products.TotalWithoutWeightCost")",
                                            width: 100
                                        }, {
                                            field: "WeightCostDec",
                                            title: "@T("Admin.Orders.Products.WeightCost")",
                                            width: 100,
                                            template: "# if (WeightCostDec > 0) { #" +
                                                "#=WeightCost#" +
                                                "#} else {#" +
                                                "<p>@(T("orderitem.includeweightcost.false"))</p>" +
                                                "# } #",
                                            editor: addExtendCustom
                                        }, {
                                            field: "UnitWeightCost",
                                            title: "@T("Admin.Orders.Products.UnitWeightCost")",
                                            hidden: true,
                                            editor: addExtendCustom
                                        }, {
                                            field: "ItemWeight",
                                            title: "@T("Admin.Orders.Products.ItemWeight")",
                                            hidden: true
                                        }, {
                                            field: "SubTotalInclTax",
                                            title: "@T("Admin.Orders.Products.Total")",
                                            width: 100
                                        }, {
                                            field: "PackageOrderId",
                                            title: "@T("Admin.Orders.Products.PackageOrderId")",
                                            width: 100,
                                            editor: editPackageOrderId,
                                            template: "# if (PackageOrder != null) { #" +
                                                      "<p>#=PackageOrder.PackageCode# - #=PackageOrder.PackageName# </p>" +
                                                      "#} else {#" +
                                                      "<p></p>" +
                                                      "# } #"

                                        }, {
                                            field: "PackageItemCode",
                                            title: "@T("Admin.Orders.Products.PackageItemCode")",
                                            width: 100
                                        }, {
                                            field: "PackageItemProcessedDatetime",
                                            title: "@T("Admin.Orders.Products.PackageItemProcessedDatetime")",
                                            width: 150,
                                            editor: dateTimeEditorCustom,
                                            template: "# if (PackageItemProcessedDatetime != null) { #" +
                                                "<p>#= kendo.toString(kendo.parseDate(PackageItemProcessedDatetime, 'yyyy-MM-dd'), 'MM/dd/yyyy') #</p>" +
                                                "#} else {#" +
                                                "<p></p>" +
                                                "# } #"
                                        }, {
                                            field: "IsOrderCheckout",
                                            title: "@T("Admin.Orders.Products.IsOrderCheckout")",
                                            template: "# if (IsOrderCheckout) { #" +
                                                "@T("Admin.Orders.Products.IsOrderCheckout.True")" +
                                                "#} else {#" +
                                                "@T("Admin.Orders.Products.IsOrderCheckout.False")" +
                                                "# } #"

                                        }, {
                                            command: {
                                                name: "edit",
                                                text: {
                                                    edit: "@T("Admin.Common.Edit")",
                                                    update: "@T("Admin.Common.Update")",
                                                    cancel: "@T("Admin.Common.Cancel")"
                                                }
                                            },
                                            title: "@T("Admin.Common.Edit")",
                                            width: 150
                                        }
                                    ]
                                });
                            }

                            function grid_edit(e) {
                                //$(e.container).parent().css({
                                //    width: '800px',
                                //    height: 'auto'
                                //});
                                //console.log(e);
                                var weightCostElement = $("input[name=WeightCostDec]");
                                $("input[name=ItemWeight]").on('input',function() {
                                    var itemWeight = parseFloat($(this).val());
                                    if (itemWeight > 0) {
                                        var unitWeightCost = $("input[name=UnitWeightCost]").val();
                                        var weightCostDec = parseFloat(unitWeightCost) * itemWeight;
                                        //need trigger change update data to model
                                        weightCostElement.val(weightCostDec).change();
                                    }
                                });

                                $("input[name=UnitWeightCost]").on('input',function() {
                                    var unitWeightCost = parseFloat($(this).val());
                                    if (unitWeightCost > 0) {
                                        var itemWeight = $("input[name=ItemWeight]").val();
                                        var weightCostDec = parseFloat(itemWeight) * unitWeightCost;
                                        //need trigger change update data to model
                                        weightCostElement.val(weightCostDec).change();
                                    }
                                });

                            }

                            function addExtendCustom(container, options) {

                                var element = $('<input class="k-input k-textbox" name="'+options.field+ '" data-text-field="' + options.field + '" data-value-field="' + options.field + '" data-bind="value:' + options.field + '" /><span> ' + options.model.PrimaryStoreCurrencyCode+'</span >');

                                element.appendTo(container);
                            }

                            function hideOnEditor(container, options) {
                                container.prevObject.find("div[data-container-for='" + options.field + "']").hide();
                                container.prevObject.find("label[for='" + options.field + "']").parent().hide();
                            }
                            function dateTimeEditorCustom(container, options) {

                                $('<input data-text-field="' + options.field + '" data-value-field="' + options.field + '" data-bind="value:' + options.field + '" />')
                                    .appendTo(container)
                                    .kendoDatePicker({
                                        value: kendo.toString(kendo.parseDate(options.model.PackageItemProcessedDatetime, 'yyyy-MM-dd'), 'MM/dd/yyyy')
                                    });
                            }
                            function editPackageOrderId(container, options) {
                                $('<input data-text-field="PackageOrderName" data-value-field="' + options.field + '" data-bind="value:' + options.field + '" />')
                                    .appendTo(container)
                                    .kendoDropDownList({
                                        autoBind: false,
                                        dataTextField: "PackageOrderName",
                                        dataValueField: "PackageOrderId",
                                        dataSource: {
                                            type: "json",
                                            serverFiltering: true,
                                            transport: {
                                                read: {
                                                    url: "@Html.Raw(Url.Action("GetsPackageOrderAvailble", "Order"))",
                                                    type: "GET",
                                                    dataType: "json"
                                                }
                                            }
                                        }
                                    });
                            }

                            //$('#expand').click(function(e) {
                            //    var grid = $("#orders-grid").data("kendoGrid");
                            //    $(".k-master-row").each(function(index) {
                            //        grid.expandRow(this);
                            //    });
                            //});

                            $('#collapse').click(function(e) {
                                var grid = $("#orders-grid").data("kendoGrid");
                                $(".k-master-row").each(function(index) {
                                    grid.collapseRow(this);
                                });
                            });

                            function setChecked(ckbId) {
                                var status =  $('#ckb' + ckbId).is(':checked');
                                if (status) {
                                    status = false;
                                } else {
                                    status = true;
                                }
                                $('#ckb' + ckbId).attr('checked', status).change();
                            }
                        </script>

                        <script type="text/javascript">
                            var selectedIds = [];
                            var reportAggregates = "";

                            $(document).ready(function() {
                                $('#@Html.IdFor(model => model.TodayFilter)').click(function() {
                                    if ($(this).is(':checked')) {
                                        var start = new Date();
                                        start.setHours(0, 0, 0, 0);
                                        var end = new Date();
                                        end.setHours(23, 59, 59, 999);
                                        var startDate = kendo.toString(kendo.parseDate(start), 'MM/dd/yyyy HH:mm tt');
                                        var endDate = kendo.toString(kendo.parseDate(end), 'MM/dd/yyyy HH:mm tt');
                                        $('#@Html.IdFor(model => model.StartDate)').val(startDate);
                                        $('#@Html.IdFor(model => model.EndDate)').val(endDate);
                                    } else {
                                        $('#@Html.IdFor(model => model.StartDate)').val('');
                                        $('#@Html.IdFor(model => model.EndDate)').val('');
                                    }
                                });

                                //search button
                                $('#search-orders').click(function() {
                                    //search
                                    var grid = $('#orders-grid').data('kendoGrid');
                                    grid.dataSource.page(1); //new search. Set page size to 1
                                    //grid.dataSource.read(); we already loaded the grid above using "page" function
                                    //clear selected checkboxes
                                    $('.checkboxGroups').attr('checked', false).change();
                                    selectedIds = [];
                                    return false;
                                });

                                $("".concat("#@Html.IdFor(model => model.BillingEmail),",
                                    "#@Html.IdFor(model => model.BillingFullName),",
                                    "#@Html.IdFor(model => model.LinkFacebook),",
                                    "#@Html.IdFor(model => model.BillingPhone),",
                                    "#@Html.IdFor(model => model.OrderNotes)")).keydown(function(event) {
                                    if (event.keyCode === 13) {
                                        $("#search-orders").click();
                                        return false;
                                    }
                                });

                                $("#@Html.IdFor(model => model.GoDirectlyToCustomOrderNumber)").keydown(
                                    function(event) {
                                        if (event.keyCode === 13) {
                                            $("#go-to-order-by-number").click();
                                            return false;
                                        }
                                    });

                                $('#mastercheckbox').click(function() {
                                    $('.checkboxGroups').attr('checked', $(this).is(':checked')).change();
                                });

                                //wire up checkboxes.
                                $('#orders-grid').on('change',
                                    'input[type=checkbox][id!=mastercheckbox][class=checkboxGroups]',
                                    function(e) {
                                        var $check = $(this);
                                        if ($check.is(":checked") == true) {
                                            var checked = jQuery.inArray($check.val(), selectedIds);
                                            if (checked == -1) {
                                                //add id to selectedIds.
                                                selectedIds.push($check.val());
                                            }
                                        } else {
                                            var checked = jQuery.inArray($check.val(), selectedIds);
                                            if (checked > -1) {
                                                //remove id from selectedIds.
                                                selectedIds = $.grep(selectedIds,
                                                    function(item, index) {
                                                        return item != $check.val();
                                                    });
                                            }
                                        }
                                        updateMasterCheckbox();
                                    });
                            });

                            function additionalData() {
                                var data = {
                                    StartDate: $('#@Html.IdFor(model => model.StartDate)').val(),
                                    EndDate: $('#@Html.IdFor(model => model.EndDate)').val(),
                                    OrderStatusIds: $('#@Html.IdFor(model => model.OrderStatusIds)').val(),
                                    PaymentStatusIds: $('#@Html.IdFor(model => model.PaymentStatusIds)').val(),
                                    ShippingStatusIds: $('#@Html.IdFor(model => model.ShippingStatusIds)').val(),
                                    StoreId: $('#@Html.IdFor(model => model.StoreId)').val(),
                                    VendorId: $('#@Html.IdFor(model => model.VendorId)').val(),
                                    WarehouseId: $('#@Html.IdFor(model => model.WarehouseId)').val(),
                                    LinkSourceProduct: $.trim($('#@Html.IdFor(model => model.LinkSourceProduct)').val()),
                                    PackageOrderItemCode: $.trim($('#@Html.IdFor(model => model.PackageOrderItemCode)').val()),
                                    BillingEmail: $.trim($('#@Html.IdFor(model => model.BillingEmail)').val()),
                                    BillingPhone: $.trim($('#@Html.IdFor(model => model.BillingPhone)').val()),
                                    LinkFacebook: $.trim($('#@Html.IdFor(model => model.LinkFacebook)').val()),
                                    BillingFullName: $.trim($('#@Html.IdFor(model => model.BillingFullName)').val()),
                                    BillingCountryId: $('#@Html.IdFor(model => model.BillingCountryId)').val(),
                                    PaymentMethodSystemName: $('#@Html.IdFor(model => model.PaymentMethodSystemName)').val(),
                                    ProductId: $('#@Html.IdFor(model => model.ProductId)').val(),
                                    IsOrderCheckout: $('#@Html.IdFor(model => model.IsOrderCheckout)').val(),
                                    OrderNotes: $.trim($('#@Html.IdFor(model => model.OrderNotes)').val())
                                };
                                addAntiForgeryToken(data);
                                return data;
                            }

                            function onDataBound(e) {
                                //this.expandRow(this.tbody.find("tr.k-master-row").first());
                                $('#orders-grid input[type=checkbox][id!=mastercheckbox][class=checkboxGroups]').each(
                                    function() {
                                        var currentId = $(this).val();
                                        var checked = jQuery.inArray(currentId, selectedIds);
                                        //set checked based on if current checkbox's value is in selectedIds.
                                        $(this).attr('checked', checked > -1);
                                    });

                                updateMasterCheckbox();

                                //update order totals summary
                                if (reportAggregates != "") {
                                    for (var key in reportAggregates) {
                                        $('#aggregator-profit-block').text(reportAggregates['aggregatorprofit']);
                                        $('#aggregator-shipping-block').text(reportAggregates['aggregatorshipping']);
                                        $('#aggregator-tax-block').text(reportAggregates['aggregatortax']);
                                        $('#aggregator-total-block').text(reportAggregates['aggregatortotal']);
                                    }
                                }
                            }

                            function updateMasterCheckbox() {
                                var numChkBoxes =
                                    $('#orders-grid input[type=checkbox][id!=mastercheckbox][class=checkboxGroups]')
                                        .length;
                                var numChkBoxesChecked =
                                    $(
                                            '#orders-grid input[type=checkbox][id!=mastercheckbox][class=checkboxGroups]:checked')
                                        .length;
                                $('#mastercheckbox').attr('checked',
                                    numChkBoxes == numChkBoxesChecked && numChkBoxes > 0);
                            }
                        </script>
                    </div>
                </div>
            </div>
        </div>
    </div>
</form>

@*export selected (XML). We don't use GET approach because it's limited to 2K-4K chars and won't work for large number of entities*@
<form asp-controller="Order" asp-action="ExportXmlSelected" method="post" id="export-xml-selected-form">
    <input type="hidden" id="selectedIds" name="selectedIds" value="" />
</form>

<script type="text/javascript">
    $(document).ready(function () {
        $('#exportxml-selected').click(function (e) {
            e.preventDefault();
            var ids = selectedIds.join(",");
            $('#export-xml-selected-form #selectedIds').val(ids);
            $('#export-xml-selected-form').submit();
            return false;
        });
    });
</script>

@*export selected (Excel). We don't use GET approach because it's limited to 2K-4K chars and won't work for large number of entities*@
<form asp-controller="Order" asp-action="ExportExcelVendorInvoiesSelected" method="post" id="exportexcel-invoice-vendor-selected-form">
    <input type="hidden" id="selectedIds" name="selectedIds" value="" />
</form>

<script type="text/javascript">
    $(document).ready(function () {
        $('#exportexcel-invoice-vendor-selected').click(function (e) {
            e.preventDefault();
            var ids = selectedIds.join(",");
            $('#exportexcel-invoice-vendor-selected-form #selectedIds').val(ids);
            $('#exportexcel-invoice-vendor-selected-form').submit();
            return false;
        });
    });
</script>
<form asp-controller="Order" asp-action="ExportExcelSelected" method="post" id="export-excel-selected-form">
    <input type="hidden" id="selectedIds" name="selectedIds" value="" />
</form>

<script type="text/javascript">
    $(document).ready(function () {
        $('#exportexcel-selected').click(function (e) {
            e.preventDefault();
            var ids = selectedIds.join(",");
            $('#export-excel-selected-form #selectedIds').val(ids);
            $('#export-excel-selected-form').submit();
            return false;
        });
    });
</script>

@*Print packaging slips selected (XML). We don't use GET approach because it's limited to 2K-4K chars and won't work for large number of entities*@
<form asp-controller="Order" asp-action="PdfInvoiceSelected" method="post" id="pdf-invoice-selected-form">
    <input type="hidden" id="selectedIds" name="selectedIds" value="" />
</form>

@*Print packaging slips selected (XML). We don't use GET approach because it's limited to 2K-4K chars and won't work for large number of entities*@
<form asp-controller="Order" asp-action="PdfInvoiceVendorSelected" method="post" id="pdf-invoice-vendor-selected-form">
    <input type="hidden" id="selectedVendorIds" name="selectedIds" value="" />
</form>

<script type="text/javascript">
    function ShowOrderDetailPopup(orderId) {

        var queryUrl = '../Order/OrderDetailPopup?orderId=' + orderId;
        OpenWindow(queryUrl, 1000, 800, true);
        return true;
    };
    $(document).ready(function () {
        $('#pdf-invoice-selected').click(function (e) {
            e.preventDefault();
            var ids = selectedIds.join(",");
            $('#pdf-invoice-selected-form #selectedIds').val(ids);
            $('#pdf-invoice-selected-form').submit();
            return false;
        });

        $('#pdf-invoice-vendor-selected').click(function (e) {
            e.preventDefault();
            var ids = selectedIds.join(",");
            $('#pdf-invoice-vendor-selected-form #selectedVendorIds').val(ids);
            $('#pdf-invoice-vendor-selected-form').submit();
            return false;
        });
    });
</script>